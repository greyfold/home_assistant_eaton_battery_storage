alias: Send Meter Data to SDM120CT Emulator MQTT + Poll Enphase
description: >-
  IMPORTANT ACCURACY WARNING: The Eaton xStorage Home inverter has poor energy 
  monitoring accuracy with power measurements typically 30% higher than actual 
  values. For accurate energy calculations, use external energy monitoring 
  instead of the built-in inverter measurements.

  Needs Enphase Envoy custom local polling interval.

  This automation publishes real-time house net power data to the inverter with
  a small positive bias to prevent grid export. It reads the home's net power
  from the sensor.solar_panels_current_net_power_consumption_watts sensor, adds
  100 W to the value, and inverts the sign because the inverter interprets
  negative values as export. This ensures the inverter always sees slightly more
  load than reality, encouraging it to discharge or reduce export.
  
  The automation includes a 500W maximum output limit to protect battery cell
  balancing. When the inverter is already outputting 500W or more (from
  sensor.storage_battery_power_production), the activePower is set to 0 to
  prevent further discharge. When below 500W, it calculates the additional
  power needed up to the 500W limit. This prevents excessive discharge rates
  that could cause cell balancing issues in the battery system.
  
  The payload also includes current voltage, current, power factor, and frequency
  values for accurate emulation of the energy meter.
triggers:
  - trigger: state
    entity_id:
      - sensor.solar_panels_current_net_power_consumption_watts
    for:
      hours: 0
      minutes: 0
      seconds: 0
  - trigger: time_pattern
    minutes: /1
conditions: []
actions:
  - action: mqtt.publish
    metadata: {}
    data:
      evaluate_payload: false
      qos: "0"
      retain: false
      topic: homeassistant/sensor/sdm120ct/meter_data
      payload: |
        {
          "voltage": "{{ states('sensor.solar_panels_voltage_net_consumption_ct') | float }}",
          "current": "{{ (states('sensor.solar_panels_net_consumption_ct_current') | float) * -1 }}",
          "activePower": "{% set net_power = (states('sensor.solar_panels_current_net_power_consumption_watts') | float) %}{% set battery_output = (states('sensor.storage_battery_power_production') | float) %}{% if battery_output >= 500 %}0{% else %}{{ -1 * [([((net_power + 100) | float), 0] | max), 500 - battery_output] | min }}{% endif %}",
          "powerFactor": "{{ states('sensor.solar_panels_powerfactor_net_consumption_ct') | float }}",
          "frequency": "{{ states('sensor.solar_panels_frequency_production_ct') | float }}"
        }
mode: single
